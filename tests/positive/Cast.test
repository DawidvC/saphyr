
struct Foo { int a; }

void func()
{
	@void p = new Foo;

	@Foo f = p->as(@Foo);

	int a = 10;

	auto b = a->as(bool);
}

void complex()
{
	@void p = new Foo;

	int z = p->as(@Foo).a;
}

========

%Foo = type { i32 }

define void @func() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca i8*
  %3 = bitcast %Foo* %2 to i8*
  store i8* %3, i8** %p
  %4 = load i8** %p
  %5 = bitcast i8* %4 to %Foo*
  %6 = alloca %Foo*
  store %Foo* %5, %Foo** %6
  %7 = load %Foo** %6
  %f = alloca %Foo*
  store %Foo* %7, %Foo** %f
  %a = alloca i32
  store i32 10, i32* %a
  %8 = load i32* %a
  %9 = icmp ne i32 %8, 0
  %b = alloca i1
  store i1 %9, i1* %b
  ret void
}

declare i8* @malloc(i64)

define void @complex() {
  %1 = call i8* @malloc(i64 4)
  %2 = bitcast i8* %1 to %Foo*
  %p = alloca i8*
  %3 = bitcast %Foo* %2 to i8*
  store i8* %3, i8** %p
  %4 = load i8** %p
  %5 = bitcast i8* %4 to %Foo*
  %6 = alloca %Foo*
  store %Foo* %5, %Foo** %6
  %7 = load %Foo** %6
  %8 = getelementptr %Foo* %7, i32 0, i32 0
  %9 = load i32* %8
  %z = alloca i32
  store i32 %9, i32* %z
  ret void
}
