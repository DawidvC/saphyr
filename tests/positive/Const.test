
struct S { int a; @int b; }

void foo()
{
	const int a = 3;
	const int b;

	int c = a + b;
}

int zzz(const int a)
{
	return a + 4;
}

void bar()
{
	const S a;

	a.b@ = 4;

	int k;
	zzz(k);
}

========

%S = type { i32, i32* }

define void @foo() {
  %a = alloca i32
  store i32 3, i32* %a
  %b = alloca i32
  %1 = load i32* %a
  %2 = load i32* %b
  %3 = add i32 %1, %2
  %c = alloca i32
  store i32 %3, i32* %c
  ret void
}

define i32 @zzz(i32 %a) {
  %1 = alloca i32
  store i32 %a, i32* %1
  %2 = load i32* %1
  %3 = add i32 %2, 4
  ret i32 %3
}

define void @bar() {
  %a = alloca %S
  %1 = getelementptr %S* %a, i32 0, i32 1
  %2 = load i32** %1
  store i32 4, i32* %2
  %k = alloca i32
  %3 = load i32* %k
  %4 = call i32 @zzz(i32 %3)
  ret void
}
